/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;
import controller.AppointmentController;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeParseException;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
/**
 *
 * @author user
 */
public class AppointmentsPanel extends javax.swing.JPanel {
    private AppointmentController controller;
    private final InputValidator validator = new InputValidator();
    /**
     * Creates new form AppointmentsPanel
     */
    public AppointmentsPanel() {
        initComponents();
        controller = new AppointmentController();
        loadAppointmentsTable();
        loadCounselors();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAppointments = new javax.swing.JTable();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        lblStudent = new javax.swing.JLabel();
        txtStudent = new javax.swing.JTextField();
        lblCounselor = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        txtDate = new javax.swing.JTextField();
        cbCounselor = new javax.swing.JComboBox<>();
        lblTime = new javax.swing.JLabel();
        txtTime = new javax.swing.JTextField();
        btnBook = new javax.swing.JButton();
        lblAppointments = new javax.swing.JLabel();

        setBackground(new java.awt.Color(245, 245, 255));
        setPreferredSize(new java.awt.Dimension(585, 452));

        tblAppointments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Counselor", "Date", "Time", "Status"
            }
        ));
        tblAppointments.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAppointmentsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblAppointments);

        jScrollPane2.setViewportView(jScrollPane1);

        btnUpdate.setText("Update/Reschedule Appointment");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Cancel Appointment");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));

        lblStudent.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblStudent.setText("Student Name");

        txtStudent.setText("Enter student name");

        lblCounselor.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblCounselor.setText("Counselor");

        lblDate.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblDate.setText("Date");

        txtDate.setText("yyyy-MM-dd");

        cbCounselor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblTime.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblTime.setText("Time");

        txtTime.setText("HH:mm");

        btnBook.setText("Book Appointment");
        btnBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookActionPerformed(evt);
            }
        });

        lblAppointments.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblAppointments.setText("Create Appointment");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDate)
                            .addComponent(lblAppointments)
                            .addComponent(lblStudent)
                            .addComponent(txtStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCounselor)
                            .addComponent(cbCounselor, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTime)
                            .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(btnBook, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(lblAppointments)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblStudent)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblCounselor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbCounselor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTime)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBook, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 141, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    public void loadCounselors() {
        java.util.List<String> counselorNames = controller.getAllCounselorNames();
        cbCounselor.removeAllItems();
        for (String name : counselorNames){
            cbCounselor.addItem(name);
        }
    }
    private void loadAppointmentsTable(){
        java.util.List<model.Appointment> appointments = controller.getAllAppointments();
        System.out.println("Appointments found: " + appointments.size());
        javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel(
        new Object[][] {},
        new String[] { "ID", "Student", "Counselor", "Date", "Time", "Status" }
    )  {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };
        
        model.setRowCount(0);
        for (model.Appointment appt : appointments){
            System.out.println("Adding: " + appt.getStudent());
            model.addRow(new Object[] {
                appt.getId(),
                appt.getStudent(),
                appt.getCounselor(),
                appt.getDate().toString(),
                appt.getTime().toString(),
                appt.getStatus()
            });
        }
        tblAppointments.setModel(model);
        tblAppointments.getColumnModel().getColumn(0).setMinWidth(0);
        tblAppointments.getColumnModel().getColumn(0).setMaxWidth(0);
        tblAppointments.getColumnModel().getColumn(0).setPreferredWidth(0);
    }
    
    private class InputValidator {
        public boolean validateTextFields(Object[][] fields) {
            for (Object[] entry : fields) {
                JTextField field = (JTextField) entry[0];
                String placeholder = (String) entry[1];
                String fieldName = (String) entry[2];

                String text = field.getText().trim();
                if (text.isEmpty() || text.equals(placeholder)) {
                    JOptionPane.showMessageDialog(AppointmentsPanel.this,
                            "Please enter a valid value for " + fieldName,
                            "Validation Error",
                            JOptionPane.ERROR_MESSAGE);
                    field.requestFocus();
                    return false;
                }
            }
            return true;
        }

    public boolean validateComboBox(JComboBox<?> comboBox, String fieldName) {
        Object selected = comboBox.getSelectedItem();
        if (selected == null || selected.toString().trim().isEmpty()) {
            JOptionPane.showMessageDialog(AppointmentsPanel.this,
                    "Please select a valid " + fieldName,
                    "Validation Error",
                    JOptionPane.ERROR_MESSAGE);
            comboBox.requestFocus();
            return false;
        }
        return true;
    }
}
    private void clearInputFields(){
        txtStudent.setText("Enter student name");
        cbCounselor.setSelectedIndex(0);
        txtDate.setText("yyyy-MM-dd");
        txtTime.setText("HH:mm");
    }
    
    private void btnBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookActionPerformed
        String student = txtStudent.getText().trim();
        String counselor = cbCounselor.getSelectedItem().toString();
        String dateStr = txtDate.getText().trim();
        String timeStr = txtTime.getText().trim();
        String status = "Scheduled";
        
        if (!validator.validateTextFields(new Object[][] {
        {txtStudent, "Enter student name", "Student Name"},
        {txtDate, "yyyy-MM-dd", "Date"},
        {txtTime, "HH:mm", "Time"}
        })) return;
        if (!validator.validateComboBox(cbCounselor, "Counselor")) return;
        
        try{
            LocalDate date = LocalDate.parse(dateStr);
            LocalTime time = LocalTime.parse(timeStr);
            controller.bookAppointment(student, counselor, date, time, status);
            javax.swing.JOptionPane.showMessageDialog(this, "Appointment booked.");
            loadAppointmentsTable();  
            clearInputFields();
        }
        catch (DateTimeParseException e){
            javax.swing.JOptionPane.showMessageDialog(this, "Invalid date or time format. Use yyyy-MM-dd and HH:mm. ");
        }  
    }//GEN-LAST:event_btnBookActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        int selectedRow = tblAppointments.getSelectedRow();
        if(selectedRow == -1){
            JOptionPane.showMessageDialog(this, "Please select an appointment to reschedule");
        }
        else{
            int id = Integer.parseInt(tblAppointments.getValueAt(selectedRow, 0).toString());
            if (!validator.validateTextFields(new Object[][] {
                {txtStudent, "Enter student name", "Student Name"},
                {txtDate, "yyyy-MM-dd", "Date"},
                {txtTime, "HH:mm", "Time"}
            })) return;
            if (!validator.validateComboBox(cbCounselor, "Counselor")) return;
            try{
                String student = txtStudent.getText().trim();
                String counselor = cbCounselor.getSelectedItem().toString();
                String newDateStr = txtDate.getText().trim();
                String newTimeStr = txtTime.getText().trim();
                LocalDate newDate = LocalDate.parse(newDateStr);
                LocalTime newTime = LocalTime.parse(newTimeStr);
                
                String oldDateStr = tblAppointments.getValueAt(selectedRow, 3).toString();
                String oldTimeStr = tblAppointments.getValueAt(selectedRow, 4).toString();
                
                LocalDate oldDate = LocalDate.parse(oldDateStr);
                LocalTime oldTime = LocalTime.parse(oldTimeStr);
                
                String status;
                if (!newDate.equals(oldDate) || !newTime.equals(oldTime)){
                    status = "Rescheduled";
                }
                else {
                    status = tblAppointments.getValueAt(selectedRow, 5).toString();
                }
                
                controller.updateAppointment(id, student, counselor, newDate, newTime, status);
                javax.swing.JOptionPane.showMessageDialog(this, "Appointment updated successflly.");
                loadAppointmentsTable();  
                clearInputFields();
            }
            catch (DateTimeParseException e){
                javax.swing.JOptionPane.showMessageDialog(this, "Invalid date or time format. Use yyyy-MM-dd and HH:mm. ");
            }
        }
        
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int selectedRow = tblAppointments.getSelectedRow();
        if(selectedRow == -1){
            JOptionPane.showMessageDialog(this, "Please select an appointment to cancel");
        }
        else{
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to cancel this appointment?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION){
            return;
        }
        
        int id = Integer.parseInt(tblAppointments.getValueAt(selectedRow, 0).toString());
        controller.cancelAppointment(id);
        JOptionPane.showMessageDialog(this, "Appointment cancelled successfully.");
        loadAppointmentsTable();
        clearInputFields();
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tblAppointmentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAppointmentsMouseClicked
        int selectedRow = tblAppointments.getSelectedRow();
        if (selectedRow != -1) {
            String student = tblAppointments.getValueAt(selectedRow, 1).toString();
            String counselor = tblAppointments.getValueAt(selectedRow, 2).toString();
            String date = tblAppointments.getValueAt(selectedRow, 3).toString();
            String time = tblAppointments.getValueAt(selectedRow, 4).toString();
            txtStudent.setText(student);
            cbCounselor.setSelectedItem(counselor);
            txtDate.setText(date);
            txtTime.setText(time);
        }
    }//GEN-LAST:event_tblAppointmentsMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBook;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cbCounselor;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAppointments;
    private javax.swing.JLabel lblCounselor;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblStudent;
    private javax.swing.JLabel lblTime;
    private javax.swing.JTable tblAppointments;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtStudent;
    private javax.swing.JTextField txtTime;
    // End of variables declaration//GEN-END:variables
}
