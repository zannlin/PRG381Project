/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui;

import dao.AppointmentDAO;
import dao.CounselorDAO;
import dao.FeedbackDAO;
import javax.swing.*;
import java.awt.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;
/**
 *
 * @author user
 */
public class MainDashboard extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(MainDashboard.class.getName());
    private AppointmentsPanel appointmentsPanel;
    private CounselorsPanel counselorsPanel;
    private FeedbackPanel feedbackPanel;
    /**
     * Creates new form MainDashboard
     */
    public MainDashboard() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(245, 245, 255));
        
        appointmentsPanel = new AppointmentsPanel();
        counselorsPanel = new CounselorsPanel(this);
        feedbackPanel = new FeedbackPanel();
        
        tabMain.addTab("Appointments", appointmentsPanel);
        tabMain.addTab("Counselors", counselorsPanel);
        tabMain.addTab("Feedback", feedbackPanel);
        
        tabMain.setBackground(new java.awt.Color(230, 230, 250));
        
        StyleUtil.styleAllButtons(this);
        StyleUtil.styleAllTables(this);
    }
    private void initializeDatabase(){
        AppointmentDAO.createTable();
        CounselorDAO.createTable();
        FeedbackDAO.createTable();
    }
    public class StyleUtil {
    public static void styleButton(JButton button) {
        button.setBackground(new Color(208, 230, 255));
        button.setForeground(Color.BLACK);
        button.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        button.setFocusPainted(false);
        button.setBorder(BorderFactory.createLineBorder(new Color(160, 200, 255), 1, true));
    }
    public static void styleTable(JTable table) {
        // Table font and row settings
        table.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        table.setRowHeight(24);
        table.setShowGrid(false);
        table.setIntercellSpacing(new Dimension(0, 0));
        table.setFillsViewportHeight(true);
        
        JTableHeader header = table.getTableHeader();
        header.setFont(new Font("Segoe UI", Font.BOLD, 14));
        ((DefaultTableCellRenderer) header.getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);
        table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable tbl, Object value,
                    boolean isSelected, boolean hasFocus, int row, int column) {

                Component c = super.getTableCellRendererComponent(tbl, value, isSelected, hasFocus, row, column);

                if (!isSelected) {
                    c.setBackground((row % 2 == 0) ? new Color(245, 245, 255) : Color.WHITE);
                } else {
                    c.setBackground(new Color(180, 200, 255));
                }

                return c;
            }
        });
     
    }
    public static void styleAllTables(Container container){
        for (Component comp : container.getComponents()) {
            if (comp instanceof JTable) {
                styleTable((JTable) comp);
            } else if (comp instanceof Container) {
                styleAllTables((Container) comp); // recurse into child panels
            }
        }
    }

    public static void styleAllButtons(Container container) {
        for (Component comp : container.getComponents()) {
            if (comp instanceof JButton) {
                styleButton((JButton) comp);
            } else if (comp instanceof Container) {
                styleAllButtons((Container) comp); // Recursive for nested panels
            }
        }
    }
}
    public void refreshAppointmentsCounselorList() {
    appointmentsPanel.loadCounselors();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabMain = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tabMain.setBackground(new java.awt.Color(102, 102, 255));
        tabMain.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabMain, javax.swing.GroupLayout.DEFAULT_SIZE, 850, Short.MAX_VALUE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabMain, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex) {
            ex.printStackTrace(); // or log the error
        }
        java.awt.EventQueue.invokeLater(() -> new MainDashboard().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane tabMain;
    // End of variables declaration//GEN-END:variables
}
